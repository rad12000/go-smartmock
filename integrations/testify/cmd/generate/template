{{define "join"}}
    {{- range $idx, $val := .}}
        {{- $val}}{{if lt $idx (minusOne (len $))}}, {{end -}}
    {{end -}}
{{end -}}

{{define "joinSpread"}}
    {{- range $idx, $val := .}}
        {{- if eq $idx (minusOne (len $))}}...{{end}}{{$val}}{{if lt $idx (minusOne (len $))}}, {{end -}}
    {{end -}}
{{end -}}

{{define "joinLower"}}
    {{- range $idx, $val := .}}{{toLower $val}}{{if lt $idx (minusOne (len $))}}, {{end}}{{end -}}
{{end -}}

{{define "joinLowerMatcher"}}
    {{- range $idx, $val := .}}{{toLower $val}}.match(){{if lt $idx (minusOne (len $))}}, {{end}}{{end -}}
{{end -}}

{{- define "genericArgsAny"}}
 {{- len .GenericParams}}x{{len .GenericReturns}}{{if len .GenericArgs}}[{{template "join" .GenericArgs}} any]{{end -}}
{{end -}}

{{define "genericArgs"}}
 {{- len .GenericParams}}x{{len .GenericReturns}}{{if len .GenericArgs}}[{{template "join" .GenericArgs}}]{{end -}}
{{end -}}

{{define "methodParams"}}
    {{- range $idx, $val := .}}
        {{- toLower $val}} {{toUpper $val -}}
        {{- if lt $idx (minusOne (len $)) -}}, {{end -}}
    {{end -}}
{{end -}}

{{define "spreadMethodParams"}}
    {{- range $idx, $val := .}}
        {{- toLower $val}} {{if eq $idx (minusOne (len $)) -}}...{{end }}{{toUpper $val -}}
        {{- if lt $idx (minusOne (len $)) -}}, {{end -}}
    {{end -}}
{{end -}}

{{define "matcherMethodParams"}}
    {{- range $idx, $val := .}}
        {{- toLower $val}} matcher[{{toUpper $val -}}]
        {{- if lt $idx (minusOne (len $)) -}}, {{end -}}
    {{end -}}
{{end -}}

{{define "spreadMatcherMethodParams"}}
    {{- range $idx, $val := .}}
        {{- toLower $val}} matcher[{{if eq $idx (minusOne (len $)) -}}[]{{end}}{{toUpper $val -}}]
        {{- if lt $idx (minusOne (len $)) -}}, {{end -}}
    {{end -}}
{{end -}}
// Code generated by SmartMock. DO NOT EDIT.
// Source: {{.SourceFile}}

package {{.PackageName}}

import (
    "fmt"
    "github.com/stretchr/testify/mock"
    "reflect"
    "runtime"
    "strings"
)

type __testifyMock interface {
	On(methodName string, arguments ...interface{}) *mock.Call
	MethodCalled(methodName string, arguments ...interface{}) mock.Arguments
}

type matcher[T any] interface {
	match() any
}

type matcherFunc[T any] func() any

func (fn matcherFunc[T]) match() any {
	return fn()
}

// Any matches any argument, and works in conjunction with Match functions.
// It uses [mock.Anything] in the background.
func Any[T any]() matcher[T] {
	return matcherFunc[T](func() any {
		return mock.Anything
	})
}

// AnyOfType matches any argument of type T, and works in conjunction with Match functions.
// It uses [mock.AnythingOfType] in the background.
func AnyOfType[T any]() matcher[T] {
	return matcherFunc[T](func() any {
		var t T
		return mock.AnythingOfType(fmt.Sprintf("%T", t))
	})
}

// Eq uses the provided value to match the actual value of type T, and works in conjunction with Match functions.
func Eq[T any](v T) matcher[T] {
	return matcherFunc[T](func() any {
		return v
	})
}

func __funcName(methodOrFunc any) string {
	name := runtime.FuncForPC(reflect.ValueOf(methodOrFunc).Pointer()).Name()
	lastIndexOfDot := strings.LastIndex(name, ".")
	name = name[lastIndexOfDot+1:]
	dashIndex := strings.IndexRune(name, '-')
	if dashIndex > -1 { // Handles the name of a method on a struct
		name = name[:dashIndex]
	}
	return name
}

{{- define "smartFunc"}}
// Fn{{len .GenericParams}}x{{len .GenericReturns}} is a helper function to create a mock for a function that takes {{len .GenericParams}} parameters and returns {{len .GenericReturns}} values.
func Fn{{template "genericArgsAny" .}}(mock __testifyMock, fnBeingMocked func({{template "join" .GenericParams}}){{if len .GenericReturns}} ({{template "join" .GenericReturns}}){{end}}) __on{{template "genericArgs" .}} {
	return __on{{template "genericArgs" .}}{funcName: __funcName(fnBeingMocked), mock: mock}
}

{{if len .GenericParams}}
// Fn{{len .GenericParams}}x{{len .GenericReturns}} is a helper function to create a mock for a function that takes {{len .GenericParams}} parameters and returns {{len .GenericReturns}} values.
func FnSpread{{template "genericArgsAny" .}}(mock __testifyMock, fnBeingMocked func({{template "joinSpread" .GenericParams}}){{if len .GenericReturns}} ({{template "join" .GenericReturns}}){{end}}) __onSpread{{template "genericArgs" .}} {
	return __onSpread{{template "genericArgs" .}}{funcName: __funcName(fnBeingMocked), mock: mock}
}

type __onSpread{{template "genericArgsAny" .}} struct {
	funcName string
	mock     __testifyMock
}

// Called tells the mock object that a method has been called, and returns the mocked arguments.
// Panics if the call is unexpected (i.e. not preceded by appropriate .On .Return() calls)
// If [mock.Call.WaitFor] is set, blocks until the channel is closed or receives a message.
func (o __onSpread{{template "genericArgs" .}}) Called({{template "spreadMethodParams" .GenericParams}}){{if len .GenericReturns}} ({{template "join" .GenericReturns}}){{end}} {
	{{if len .GenericReturns}}args := {{end}}o.mock.MethodCalled(o.funcName{{if len .GenericParams}}, {{end}}{{template "joinLower" .GenericParams}})
	{{- range $idx, $val := .GenericReturns}}
    r{{$idx}}, _ := args.Get({{$idx}}).({{$val}})
    {{- end -}}
    {{- if len .GenericReturns}}
	return {{range $idx, $val := .GenericReturns}}r{{$idx}}{{if lt $idx (minusOne (len $.GenericReturns))}}, {{end}}{{end}}
	{{- end}}
}

// On is used to specify the exact arguments that the previously specified function should expect to receive.
// It is a thin wrapper around [mock.Mock.On].
// If looser argument matching is desired, use Match instead.
func (o __onSpread{{template "genericArgs" .}}) On({{template "spreadMethodParams" .GenericParams}}) *__spreadCall{{template "genericArgs" .}} {
	call := o.mock.On(o.funcName{{if len .GenericParams}}, {{end}}{{template "joinLower" .GenericParams}})
	return &__spreadCall{{template "genericArgs" .}}{Call: call}
}

// Match functions similarly to On, but allows for looser argument matching. For example, if you want to match any string
// for the first argument, you can use Match(Anything(), "foo", 1).
func (o __onSpread{{template "genericArgs" .}}) Match({{template "spreadMatcherMethodParams" .GenericParams}}) *__spreadCall{{template "genericArgs" .}} {
	call := o.mock.On(o.funcName{{if len .GenericParams}}, {{end}}{{template "joinLowerMatcher" .GenericParams}})
	return &__spreadCall{{template "genericArgs" .}}{Call: call}
}


type __spreadCall{{template "genericArgsAny" .}} struct {
	*mock.Call
}

// Return works the same as [mock.Call.Return], just with strong typing.
func (c *__spreadCall{{template "genericArgs" .}}) Return({{template "methodParams" .GenericReturns}}) *__spreadCall{{template "genericArgs" .}} {
	c.Call.Return({{template "joinLower" .GenericReturns}})
	return c
}

// Run works the same as [mock.Call.Run], just with strong typing.
func (c *__spreadCall{{template "genericArgs" .}}) Run(fn func({{template "spreadMethodParams" .GenericParams}})) *__spreadCall{{template "genericArgs" .}} {
	c.Call.Run(func(args mock.Arguments) {
	    {{range $idx, $val := .GenericParams -}}
	    {{- if eq $idx (minusOne (len $.GenericParams)) -}}
        arg{{$idx}}, _ := args.Get({{$idx}}).([]{{$val}})
	    {{- else -}}
        arg{{$idx}}, _ := args.Get({{$idx}}).({{$val}})
	    {{- end}}
	    {{end -}}
		fn({{range $idx, $val := .GenericParams}}arg{{$idx}}{{if lt $idx (minusOne (len $.GenericParams))}}, {{else}}...{{end}}{{end}})
	})
	return c
}
{{end -}}

type __on{{template "genericArgsAny" .}} struct {
	funcName string
	mock     __testifyMock
}

// Called tells the mock object that a method has been called, and returns the mocked arguments.
// Panics if the call is unexpected (i.e. not preceded by appropriate .On .Return() calls)
// If [mock.Call.WaitFor] is set, blocks until the channel is closed or receives a message.
func (o __on{{template "genericArgs" .}}) Called({{template "methodParams" .GenericParams}}){{if len .GenericReturns}} ({{template "join" .GenericReturns}}){{end}} {
	{{if len .GenericReturns}}args := {{end}}o.mock.MethodCalled(o.funcName{{if len .GenericParams}}, {{end}}{{template "joinLower" .GenericParams}})
	{{- range $idx, $val := .GenericReturns}}
    r{{$idx}}, _ := args.Get({{$idx}}).({{$val}})
    {{- end -}}
    {{- if len .GenericReturns}}
	return {{range $idx, $val := .GenericReturns}}r{{$idx}}{{if lt $idx (minusOne (len $.GenericReturns))}}, {{end}}{{end}}
	{{- end}}
}

// On is used to specify the exact arguments that the previously specified function should expect to receive.
// It is a thin wrapper around [mock.Mock.On].
// If looser argument matching is desired, use Match instead.
func (o __on{{template "genericArgs" .}}) On({{template "methodParams" .GenericParams}}) *__call{{template "genericArgs" .}} {
	call := o.mock.On(o.funcName{{if len .GenericParams}}, {{end}}{{template "joinLower" .GenericParams}})
	return &__call{{template "genericArgs" .}}{Call: call}
}

// Match functions similarly to On, but allows for looser argument matching. For example, if you want to match any string
// for the first argument, you can use Match(Anything(), "foo", 1).
func (o __on{{template "genericArgs" .}}) Match({{template "matcherMethodParams" .GenericParams}}) *__call{{template "genericArgs" .}} {
	call := o.mock.On(o.funcName{{if len .GenericParams}}, {{end}}{{template "joinLowerMatcher" .GenericParams}})
	return &__call{{template "genericArgs" .}}{Call: call}
}

type __call{{template "genericArgsAny" .}} struct {
	*mock.Call
}

// Return works the same as [mock.Call.Return], just with strong typing.
func (c *__call{{template "genericArgs" .}}) Return({{template "methodParams" .GenericReturns}}) *__call{{template "genericArgs" .}} {
	c.Call.Return({{template "joinLower" .GenericReturns}})
	return c
}

// Run works the same as [mock.Call.Run], just with strong typing.
func (c *__call{{template "genericArgs" .}}) Run(fn func({{template "join" .GenericParams}})) *__call{{template "genericArgs" .}} {
	c.Call.Run(func(args mock.Arguments) {
	    {{range $idx, $val := .GenericParams -}}
        arg{{$idx}}, _ := args.Get({{$idx}}).({{$val}})
	    {{end -}}
		fn({{range $idx, $val := .GenericParams}}arg{{$idx}}{{if lt $idx (minusOne (len $.GenericParams))}},{{end}}{{end}})
	})
	return c
}
{{end -}}